{"version":3,"sources":["UI/Bricks/Plus.tsx","UI/MainPage/Header.tsx","UI/MainPage/AddList.tsx","BLL/Reducers/MainReducer.ts","BLL/Selectors/mainSelector.tsx","UI/Bricks/ListItem.tsx","UI/MainPage/MainPage.tsx","UI/ListPage/Header.tsx","UI/Bricks/TaskItem.tsx","UI/Bricks/BoardItem.tsx","UI/Bricks/Bucket.tsx","UI/ListPage/ListPage.tsx","App.tsx","reportWebVitals.ts","BLL/store.ts","index.tsx"],"names":["Plus","props","onClick","function","style","isPC","position","top","left","outline","border","className","Header","MyNaughtyButton","submitForm","useFormikContext","text","errors","closeHandler","disabled","AddList","enableReinitialize","initialValues","validate","values","borrowedGroup","forEach","b","title","onSubmit","addFunction","touched","handleChange","handleSubmit","Modal","show","onHide","closeButton","Title","Body","name","value","onChange","required","Footer","type","ADD_LIST","ADD_BOARD","ADD_TASK","SET_OPENED_LIST","SET_OPENED_BOARD","SET_OPENED_TASK","SET_BOARDS","SET_BOARD","SET_LISTS","initialState","openedList","openedBoard","openedTask","lists","boards","tasks","description","setLists","setBoard","board","setBoards","getLists","state","main","getOpenedList","ListItem","history","useHistory","toList","a","delay","push","pathname","search","useState","setShow","dispatch","useDispatch","useSelector","onDelete","filter","l","xmlns","width","height","fill","viewBox","d","map","MainPage","listsJSX","showToast","setShowToast","reverse","display","justifyContent","alignItems","Toast","autohide","onClose","fontSize","borderBottom","fill-rule","TaskItem","updateBoard","t","onDoubleClick","onDragStart","e","dragStartHandler","onDragEnd","dragEndHandler","onDragLeave","onDragOver","dragOverHandler","onDrop","dropHandler","draggable","cursor","key","updateTask","index","BoardItem","updateList","setText","editMode","setMode","myError","setError","dragEndHandlerTask","dragOverHandlerTask","dragStartHandlerTask","dropHandlerTask","minHeight","maxHeight","overflowY","length","check","autoFocus","target","Bucket","forPC","borderRadius","forMB","background","ListPage","currentCard","setCard","showBucket","setShowBucket","currentBoard","setCurrentBoard","currentTask","setCurrentTask","task","preventDefault","oldBoard","o","i1","i","i2","card","useEffect","listName","URL","location","searchParams","get","openList","list","overflowX","marginTop","ms","Promise","resolve","setTimeout","App","window","innerHeight","setHeight","setCurrentMode","innerWidth","addEventListener","removeEventListener","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc64de56.chunk.js","sourcesContent":["\r\ntype PropsType={\r\n    function:()=>void\r\n    isPC:boolean\r\n}\r\nexport const Plus:React.FC<PropsType>=(props)=>{\r\n    const forPC={\r\n        position:\"fixed\" as \"fixed\",\r\n        top:\"85%\",\r\n        left:\"90%\",\r\n        outline:\"none\",\r\n        border:0\r\n    }\r\n    const forMB={\r\n        position:\"fixed\" as \"fixed\",\r\n        top:\"80%\",\r\n        left:\"75%\",\r\n        outline:\"none\",\r\n        border:0\r\n    }\r\n    return<button \r\n    onClick={props.function}\r\n    style={props.isPC ? forPC : forMB} \r\n    className=\"Plus\">\r\n        +\r\n    </button>\r\n}","\r\n\r\ntype PropsType={}\r\nexport const Header:React.FC<PropsType>=(props)=>{\r\n    return<div className=\"MainHeader\">\r\n        My Lists\r\n    </div>\r\n}","import { Formik, useFormikContext } from \"formik\";\r\nimport { Modal } from \"react-bootstrap\"\r\nconst delay = (ms:number) => new Promise(resolve => setTimeout(resolve, ms))\r\ntype PropsType={\r\n    show:boolean\r\n    closeHandler:()=>void\r\n    addFunction:(text:string)=>void\r\n    borrowedGroup:any[]\r\n    title:string\r\n}\r\ntype ButtonPropsType={\r\n    closeHandler:()=>void\r\n    text:string\r\n    errors:any\r\n}\r\nconst MyNaughtyButton:React.FC<ButtonPropsType>=(props)=>{\r\n    \r\n    const {submitForm}=useFormikContext()\r\n    return<button onClick={()=>{\r\n        if (props.text && (!(props.errors && props.errors.text))){\r\n            submitForm()\r\n            props.closeHandler()\r\n        }\r\n    }} disabled={(props.errors.text || (!props.text))  ? true : false}\r\n    className=\"btn btn-success\">\r\n        Add\r\n    </button>\r\n}\r\nexport const AddList:React.FC<PropsType>=(props)=>{\r\n\r\n    return<Formik\r\n    enableReinitialize\r\n    initialValues={{text:\"\"}}\r\n    validate={(values)=>{\r\n        let errors={text:''}\r\n        props.borrowedGroup.forEach(b=>{\r\n            if(b.title===values.text){\r\n                errors.text=\"Its title have already exist\"\r\n            }\r\n        })\r\n        return errors.text ? errors : {}\r\n    }}\r\n    onSubmit={(values)=>{\r\n        props.addFunction(values.text)\r\n        values.text=\"\"\r\n    }}>\r\n        {({\r\n            values,\r\n            errors,\r\n            touched,\r\n            handleChange,\r\n            handleSubmit\r\n        })=><form onSubmit={handleSubmit}>\r\n            <Modal className={props.show ? \"ModalOpened\" : \"ModalClosed\"} \r\n            show={props.show} \r\n            onHide={props.closeHandler}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Add {props.title}</Modal.Title> \r\n            </Modal.Header>\r\n            <div> \r\n                <Modal.Body>Title:\r\n                <div>\r\n                    <input className={(errors.text && touched.text) ?\r\n                    \"form-control w-100 is-invalid\" :\r\n                    \"form-control w-100\"}\r\n                    name=\"text\" value={values.text}\r\n                    onChange={handleChange} required />\r\n                </div>\r\n                {(errors.text && touched.text) && \r\n                <div className=\"text-danger\">\r\n                    {errors.text}\r\n                </div>}\r\n            \r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button className=\"btn btn-danger\" \r\n                onClick={props.closeHandler} type=\"reset\"\r\n                >\r\n                    Close\r\n                </button>\r\n                <MyNaughtyButton \r\n                text={values.text} errors={errors}\r\n                closeHandler={props.closeHandler} />\r\n            </Modal.Footer>\r\n            </div>\r\n        </Modal></form>}\r\n    </Formik>\r\n}","import { BoardType, ListType, TaskType } from \"../../Types/Type\";\r\n\r\nconst ADD_LIST:\"MainReducer/ADD_LIST\"=\"MainReducer/ADD_LIST\"\r\nconst ADD_BOARD:\"MainReducer/ADD_BOARD\"=\"MainReducer/ADD_BOARD\"\r\nconst ADD_TASK:\"MainReducer/ADD_TASK\"=\"MainReducer/ADD_TASK\"\r\nconst SET_OPENED_LIST:\"MainReducer/SET_OPENED_LIST\"=\"MainReducer/SET_OPENED_LIST\"\r\nconst SET_OPENED_BOARD:\"MainReducer/SET_OPENED_BOARD\"=\"MainReducer/SET_OPENED_BOARD\"\r\nconst SET_OPENED_TASK:\"MainReducer/SET_OPENED_TASK\"=\"MainReducer/SET_OPENED_TASK\"\r\nconst SET_BOARDS:\"MainReducer/SET_BOARDS\"=\"MainReducer/SET_BOARDS\"\r\nconst SET_BOARD:\"MainReducer/SET_BOARD\"=\"MainReducer/SET_BOARD\"\r\nconst SET_LISTS:\"MainReducer/SET_LISTS\"=\"MainReducer/SET_LISTS\"\r\n\r\nconst testLists=[\r\n    {title:\"PricolJS\",boards:[\r\n        {title:\"Board1\",tasks:[{title:\"Task1\",description:\"\"},\r\n            {title:\"Task2\",description:\"\"},\r\n        ]},{title:\"Board2\",tasks:[{title:\"Task3\",description:\"\"}]}\r\n    ]}\r\n] as ListType[]\r\nconst initialState={\r\n    openedList:null as null | ListType,\r\n    openedBoard:null as null | BoardType,\r\n    openedTask:null as null | TaskType,\r\n    lists:testLists as ListType[]   \r\n}\r\ntype InitialStateType=typeof initialState\r\ntype ActionType=(AddListType | AddBoardType | AddTaskType | SetOpenedTaskType\r\n    | SetOpenedBoardType | SetOpenedListType | SetBoardsType |\r\n    SetBoardType | SetListsType)\r\n\r\nexport const mainReducer=(state=initialState,action:ActionType):InitialStateType=>{\r\n    switch (action.type){\r\n        case SET_LISTS:\r\n            return{\r\n                ...state,\r\n                lists:[...action.lists]\r\n            }\r\n        case SET_BOARD:\r\n            return{...state,\r\n            lists:state.lists.map(l=>{\r\n                if(state.openedList?.title===l.title){\r\n                    l.boards=l.boards.map(b=>{\r\n                        if(b.title===action.board.title){\r\n                            b.tasks=action.board.tasks\r\n                            b.title=action.board.title\r\n                            return b \r\n                        }\r\n                        return b\r\n                    })\r\n                }\r\n                return l\r\n            })}\r\n        case SET_BOARDS:\r\n            return{\r\n                ...state,\r\n                lists:[...state.lists.map(l=>{\r\n                    if(l.title===state.openedList?.title){\r\n                        return {\r\n                            title:l.title,\r\n                            boards:[...action.boards]\r\n                        }\r\n                        \r\n                    }\r\n                    return l\r\n                })],\r\n                openedList:{title:state.openedList?.title as string,\r\n                boards:[...action.boards]\r\n                }\r\n            }\r\n        case SET_OPENED_LIST:\r\n            return{...state,\r\n            openedList:action.list}\r\n        case SET_OPENED_BOARD:\r\n            return{...state,\r\n            openedBoard:action.board}\r\n        case SET_OPENED_TASK:\r\n            return{...state,\r\n            openedTask:action.task}\r\n        case ADD_LIST:\r\n            return {...state,\r\n            lists:[...state.lists,{title:action.title,boards:[]}]}\r\n        case ADD_BOARD:\r\n            return {...state,\r\n            lists:state.lists.map(l=>{\r\n                if(state.openedList && state.openedList.title === l.title){\r\n                    l.boards.push({title:action.title,tasks:[]})\r\n                }\r\n                return l\r\n            }),openedList:{title:state.openedList?.title as string,\r\n            boards:[...state.openedList?.boards as BoardType[],\r\n                {title:action.title,tasks:[]}] } }\r\n        case ADD_TASK:\r\n            return {...state,\r\n            lists:state.lists.map(l=>{\r\n                if(state.openedList && state.openedList.title === l.title){\r\n                    l.boards=l.boards.map(b=>{\r\n                        if(state.openedBoard && state.openedBoard.title===b.title){\r\n                            b.tasks.push({title:action.title,description:\"\"})\r\n                        }\r\n                        return b\r\n                    })\r\n                }\r\n                return l\r\n            })}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype SetListsType={\r\n    type:typeof SET_LISTS\r\n    lists:ListType[]\r\n}\r\nexport const setLists=(lists:ListType[]):SetListsType=>{\r\n    return{\r\n        type:SET_LISTS,\r\n        lists\r\n    }\r\n}\r\n\r\ntype SetBoardType={\r\n    type:typeof SET_BOARD\r\n    board:BoardType\r\n}\r\nexport const setBoard=(board:BoardType):SetBoardType=>{\r\n    return{\r\n        type:SET_BOARD,\r\n        board\r\n    }\r\n}\r\n\r\ntype SetBoardsType={\r\n    type:typeof SET_BOARDS\r\n    boards:BoardType[]\r\n}\r\nexport const setBoards=(boards:BoardType[]):SetBoardsType=>{\r\n    return{\r\n        type:SET_BOARDS,\r\n        boards\r\n    }\r\n}\r\n\r\ntype AddListType={\r\n    type:typeof ADD_LIST\r\n    title:string\r\n}\r\nexport const addList=(title:string):AddListType=>{\r\n    return{\r\n        type:ADD_LIST,\r\n        title\r\n    }\r\n}\r\n\r\ntype AddBoardType={\r\n    type:typeof ADD_BOARD\r\n    title:string\r\n}\r\nexport const addBoard=(title:string):AddBoardType=>{\r\n    return{\r\n        type:ADD_BOARD,\r\n        title\r\n    }\r\n}\r\n\r\ntype AddTaskType={\r\n    type:typeof ADD_TASK\r\n    title:string\r\n}\r\nexport const addTask=(title:string):AddTaskType=>{\r\n    return{\r\n        type:ADD_TASK,\r\n        title\r\n    }\r\n}\r\n\r\ntype SetOpenedListType={\r\n    type:typeof SET_OPENED_LIST\r\n    list:ListType\r\n}\r\nexport const setOpenedList=(list:ListType):SetOpenedListType=>{\r\n    return{\r\n        type:SET_OPENED_LIST,\r\n        list\r\n    }\r\n}\r\n\r\ntype SetOpenedBoardType={\r\n    type:typeof SET_OPENED_BOARD\r\n    board:BoardType\r\n}\r\nexport const setOpenedBoard=(board:BoardType):SetOpenedBoardType=>{\r\n    return{\r\n        type:SET_OPENED_BOARD,\r\n        board\r\n    }\r\n}\r\n\r\ntype SetOpenedTaskType={\r\n    type:typeof SET_OPENED_TASK\r\n    task:TaskType\r\n}\r\nexport const setOpenedTask=(task:TaskType):SetOpenedTaskType=>{\r\n    return{\r\n        type:SET_OPENED_TASK,\r\n        task\r\n    }\r\n}","import { ListItem } from \"../../UI/Bricks/ListItem\";\r\nimport { AppStateType } from \"../store\";\r\n\r\nexport const getLists=(state:AppStateType)=>{\r\n    return state.main.lists\r\n}\r\nexport const getOpenedList=(state:AppStateType)=>{\r\n    return state.main.openedList\r\n}\r\nexport const getOpenedBoard=(state:AppStateType)=>{\r\n    return state.main.openedBoard\r\n}","import { Formik, useFormikContext } from \"formik\"\r\nimport { useState } from \"react\"\r\nimport { Modal } from \"react-bootstrap\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { delay } from \"../../App\"\r\nimport { setLists } from \"../../BLL/Reducers/MainReducer\"\r\nimport { getLists } from \"../../BLL/Selectors/mainSelector\"\r\n\r\n\r\ntype PropsType={\r\n    title:string\r\n}\r\nexport const ListItem:React.FC<PropsType>=(props)=>{\r\n    const history=useHistory()\r\n    const toList=async ()=>{\r\n        await delay(1000)\r\n        history.push({\r\n            pathname:\"/board\",\r\n            search:\"title=\"+props.title\r\n        })\r\n    }\r\n\r\n    let [show,setShow]=useState(false)\r\n    const dispatch=useDispatch()\r\n    let lists=useSelector(getLists)\r\n    let onDelete=()=>{\r\n        lists=lists.filter(l=>l.title!==props.title)\r\n        dispatch(setLists(lists))\r\n        setShow(false)\r\n    }\r\n    \r\n    return<div className=\"row\"><button style={{outline:\"none\"}} onClick={toList}\r\n    className=\"ListItem mt-3 container col-11\" key={props.title}>\r\n        {props.title}\r\n        </button>\r\n        <button \r\n        onClick={()=>setShow(true)}\r\n        \r\n        className=\"btn btn-light col-1 mt-3\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" className=\"bi bi-pencil\" viewBox=\"0 0 16 16\">\r\n                <path d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\"/>\r\n            </svg>\r\n        </button>\r\n        <Formik \r\n        initialValues={{title:props.title}}\r\n        onSubmit={(values)=>{\r\n            lists=lists.map(l=>{\r\n                if(l.title===props.title){\r\n                    return {\r\n                        title:values.title,\r\n                        boards:l.boards\r\n                    }\r\n                }\r\n                return l\r\n            })\r\n            dispatch(setLists(lists))\r\n            setShow(false)\r\n        }}\r\n        validate={(values)=>{\r\n            let errors={title:\"\"}\r\n            if(!values.title){\r\n                return {title:\"Please enter title\"}\r\n            }\r\n            lists.forEach(l=>{\r\n                if(l.title!==props.title && l.title===values.title){\r\n                    errors.title=\"This title have already exist\"\r\n                }\r\n            })\r\n            if(!errors.title) return {}\r\n            else return errors\r\n        }}>\r\n        {({\r\n            handleSubmit,\r\n            handleChange,\r\n            values,\r\n            errors\r\n        })=><form onSubmit={handleSubmit}>\r\n        <Modal \r\n        show={show}\r\n        onHide={()=>setShow(false)}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>\r\n                    Change list\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                Title: <input \r\n                className=\"form-control\"\r\n                value={values.title}\r\n                name=\"title\"\r\n                onChange={handleChange}\r\n                />\r\n                <div className=\"text-danger\">\r\n                    {errors && errors.title}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button \r\n                onClick={onDelete}\r\n                className=\"btn btn-danger\">\r\n                    Delete\r\n                </button>\r\n                <MyNaughtyButton/>\r\n            </Modal.Footer>\r\n        </Modal></form>}\r\n        </Formik>\r\n    </div>\r\n}\r\n\r\ntype MyNaughtyButtonType={}\r\nconst MyNaughtyButton:React.FC<MyNaughtyButtonType>=(props)=>{\r\n    \r\n    let {submitForm}=useFormikContext()\r\n\r\n    return<button \r\n    onClick={()=>submitForm()}\r\n    className=\"btn btn-success\">\r\n        Save\r\n    </button>\r\n}","import React,{useState} from \"react\"\r\nimport { Plus } from \"../Bricks/Plus\";\r\nimport { Header } from \"./Header\";\r\nimport { AddList } from \"./AddList\";\r\nimport { addList } from \"../../BLL/Reducers/MainReducer\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getLists } from \"../../BLL/Selectors/mainSelector\";\r\nimport { ListItem } from \"../Bricks/ListItem\";\r\nimport { Toast } from \"react-bootstrap\";\r\n\r\ntype PropsType={\r\n    isPC:boolean\r\n    height:number\r\n}\r\n\r\nexport const MainPage:React.FC<PropsType>=(props)=>{\r\n    const lists=useSelector(getLists)\r\n    const listsJSX=lists.map(l=><ListItem title={l.title} />)\r\n\r\n    const dispatch=useDispatch()\r\n    const addListWithDispatch=(text:string)=>{\r\n        dispatch(addList(text))\r\n        setShowToast(true)\r\n    }\r\n\r\n\r\n    let [showToast,setShowToast]=useState(false)\r\n\r\n    let [show,setShow]=useState(false)//For Modal\r\n    const closeHandler= ()=>{\r\n        setShow(false)\r\n    }\r\n    const openHandler=()=>{setShow(true)}\r\n    return<div>\r\n        <Header />\r\n        <div className=\"container mt-4\">\r\n            {[...listsJSX].reverse()}\r\n        </div>\r\n        <Plus isPC={props.isPC} function={openHandler}/>\r\n        <AddList show={show} closeHandler={closeHandler} \r\n        title={\"list\"}\r\n        addFunction={addListWithDispatch} borrowedGroup={lists}\r\n        />\r\n        <div \r\n        className=\"ml-4\"\r\n        style={{\r\n            position:\"fixed\",\r\n            display:\"flex\",\r\n            justifyContent:\"flex-end\",\r\n            alignItems:\"flex-end\",\r\n            height:props.height-400\r\n        }}>\r\n        <Toast \r\n        show={showToast} autohide\r\n        onClose={()=>setShowToast(false)} delay={3000}>\r\n            <Toast.Header>\r\n                <strong className=\"mr-auto\">\r\n                    Notice\r\n                </strong>\r\n            </Toast.Header>\r\n            <Toast.Body>\r\n                New list added successfull\r\n            </Toast.Body>\r\n        </Toast>\r\n        </div>\r\n        </div>\r\n}\r\n","import { useHistory } from \"react-router-dom\"\r\n\r\n\r\ntype PropsType={\r\n    title:string\r\n    isPC:boolean\r\n}\r\nexport const Header:React.FC<PropsType>=(props)=>{\r\n    const history=useHistory()\r\n    const goToLists=()=>{\r\n        history.push({\r\n            pathname:'/',\r\n        })\r\n    }\r\n    return<div \r\n    style={{fontSize:\"2.5em\",\r\n    borderBottom:\"1px black solid\"}}\r\n    className={\"bg-primary fixed-top text-white\"}>\r\n            <button\r\n            onClick={goToLists}\r\n            style={{outline:\"none\",border:\"none\"}}\r\n            title={\"Go to lists\"}\r\n            className=\"EmtyButton bg-primary text-white\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fill=\"currentColor\" className=\"bi bi-arrow-left\" viewBox=\"0 0 16 16\">\r\n                    <path fill-rule=\"evenodd\" d=\"M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z\"/>\r\n                </svg>\r\n            </button>\r\n            {props.title}\r\n    </div>\r\n}","import { Formik, useFormikContext } from \"formik\"\r\nimport { useState } from \"react\"\r\nimport { Modal } from \"react-bootstrap\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { setBoard } from \"../../BLL/Reducers/MainReducer\"\r\nimport { BoardType, TaskType } from \"../../Types/Type\"\r\n\r\n\r\ntype PropsType = {\r\n    title: string\r\n    description: string\r\n    key: string\r\n    board: BoardType\r\n    dragStartHandler: (e: any, task: TaskType, board: BoardType) => void\r\n    dragEndHandler: (e: any) => void\r\n    dragOverHandler: (e: any) => void\r\n    dropHandler: (e: any, task: TaskType, board: BoardType) => void\r\n}\r\n\r\nconst MyNaughtyButton:React.FC<any>=(props)=>{\r\n    \r\n    let {submitForm}=useFormikContext()\r\n    \r\n    return<button\r\n        onClick={()=>{\r\n            submitForm()\r\n        }}\r\n        type=\"submit\"\r\n        className=\"btn btn-success\"\r\n        >\r\n            Save\r\n    </button>\r\n}\r\nexport const TaskItem: React.FC<PropsType> = (props) => {\r\n\r\n    let [show, setShow] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const onDelete=()=>{\r\n        let updateBoard={\r\n            title:props.board.title,\r\n            tasks:[]\r\n        } as BoardType\r\n        updateBoard.tasks=props.board.tasks.filter(t=>t.title!==props.title)\r\n        dispatch(setBoard(updateBoard))\r\n        setShow(false)\r\n    }\r\n\r\n    return <div>\r\n        <div\r\n            onDoubleClick={() => setShow(true)}\r\n            onDragStart={(e: any) => props.dragStartHandler(e, { title: props.title, description: props.description }, props.board)}\r\n            onDragEnd={(e: any) => {\r\n                props.dragEndHandler(e)\r\n            }}\r\n            onDragLeave={(e: any) => {}}\r\n            onDragOver={(e: any) => props.dragOverHandler(e)}\r\n            onDrop={(e: any) => props.dropHandler(e, { title: props.title, description: props.description }, props.board)}\r\n            draggable={true}\r\n            style={{ fontSize: \"2em\", cursor: \"grab\" }}\r\n            key={props.key}\r\n            className=\"card mt-2 Task text-center\">{props.title}</div>\r\n        <Formik\r\n            initialValues={{\r\n                title:props.title,\r\n                description:props.description    \r\n            }}\r\n            onSubmit={(values)=>{\r\n                let updateTask={\r\n                    title:values.title,\r\n                    description:values.description\r\n                } as TaskType\r\n                let updateBoard={\r\n                    title:props.board.title,\r\n                    tasks:[]    \r\n                } as BoardType\r\n                updateBoard.tasks=props.board.tasks.map((t,index)=>{\r\n                    if(t.title!==props.title){\r\n                        return t\r\n                    }else{\r\n                     return updateTask   \r\n                    }\r\n                })\r\n                dispatch(setBoard(updateBoard))\r\n                setShow(false)\r\n            }}\r\n            validate={(values)=>{\r\n                let errors={\r\n                    title:\"\"\r\n                }\r\n                if(!values.title){\r\n                    errors.title=\"Please enter title\"\r\n                    return errors\r\n                }\r\n                props.board.tasks.forEach(b=>{\r\n                    if(b.title!==props.title && b.title===values.title ){\r\n                        errors.title=\"This title have already exist\"\r\n                    }\r\n                })\r\n                if(!errors.title) return {}\r\n                else return errors\r\n                //ToDo check on same name (props - allTasks)\r\n            }}\r\n            >{({\r\n                handleChange,\r\n                values,\r\n                handleSubmit,\r\n                errors\r\n            })=><form onSubmit={handleSubmit}>\r\n                <Modal show={show}\r\n                onHide={() => setShow(false)}\r\n                >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>\r\n                        Change Task\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div>Title: \r\n                        <input\r\n                        name=\"title\"\r\n                        onChange={handleChange}\r\n                        value={values.title}\r\n                        className=\"form-control\"\r\n                        />\r\n                        {errors.title && <div className=\"text-danger\">\r\n                            {errors.title}\r\n                        </div>}\r\n                    </div>\r\n                    <div>\r\n                        Description: \r\n                        <textarea \r\n                        onChange={handleChange}\r\n                        name=\"description\"\r\n                        className=\"form-control\"\r\n                        >{values.description}</textarea>\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <button \r\n                    onClick={onDelete}\r\n                    className=\"btn btn-danger\">\r\n                        Delete\r\n                    </button>\r\n                    <MyNaughtyButton />\r\n                </Modal.Footer>\r\n            </Modal></form>}\r\n        </Formik>\r\n    </div>\r\n}\r\n\r\n","import { Formik, useFormikContext } from \"formik\"\r\nimport { DragEventHandler, useState } from \"react\"\r\nimport { Modal } from \"react-bootstrap\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { addTask, setBoards, setOpenedBoard } from \"../../BLL/Reducers/MainReducer\"\r\nimport { getLists, getOpenedBoard, getOpenedList } from \"../../BLL/Selectors/mainSelector\"\r\nimport { BoardType, ListType, TaskType } from \"../../Types/Type\"\r\nimport { TaskItem } from \"./TaskItem\"\r\n\r\n\r\ntype PropsType={\r\n    title:string\r\n    tasks:TaskType[]\r\n    height:number\r\n    dragStartHandler:(e:any,card:BoardType)=>void\r\n    dragOverHandler:(e:any)=>void\r\n    dragEndHandler:(e:any)=>void\r\n    dropHandler:(e:any,card:BoardType)=>void\r\n\r\n    dragStartHandlerTask:(e:any,task:TaskType,board:BoardType)=>void\r\n    dragOverHandlerTask:(e:any)=>void\r\n    dragEndHandlerTask:(e:any)=>void\r\n    dropHandlerTask:(e:any,task:TaskType | null,board:BoardType)=>void\r\n}\r\nexport const BoardItem:React.FC<PropsType>=(props)=>{\r\n\r\n    let [show,setShow]=useState(false) //for modal\r\n    const openedList=useSelector(getOpenedList)\r\n    const onDelete=()=>{\r\n        let updateList={title:openedList ? openedList.title : \"\",boards:[]} as ListType\r\n        updateList.boards=openedList ? openedList.boards.filter(b=>b.title!==props.title) : []\r\n        dispatch(setBoards(updateList.boards))\r\n        setShow(false)\r\n    }\r\n\r\n    let [text,setText]=useState(\"\") //text which will be use for add task\r\n    let [editMode,setMode]=useState(false) //switch between addTask \r\n    let [myError,setError]=useState(\"\") // to show error add Task(simmiliary title)\r\n    const dispatch = useDispatch()\r\n    const addTaskUI=()=>{\r\n        dispatch(setOpenedBoard({title:props.title,tasks:props.tasks}))\r\n        setError(\"\")\r\n        let check=true\r\n        props.tasks.forEach(t=>{\r\n            if(t.title===text){\r\n                setError(\"This title have already exist\")\r\n                check=false\r\n            }\r\n        })\r\n        if (!text) check=false\r\n        if (check) {\r\n            dispatch(addTask(text))\r\n        }\r\n        setText(\"\")\r\n        setMode(false)\r\n    }\r\n    let tasks=props.tasks.map(t=><TaskItem \r\n        dragEndHandler={props.dragEndHandlerTask}\r\n        dragOverHandler={props.dragOverHandlerTask}\r\n        dragStartHandler={props.dragStartHandlerTask}\r\n        dropHandler={props.dropHandlerTask}\r\n        \r\n        title={t.title}\r\n        board={{title:props.title,tasks:props.tasks}}\r\n        key={t.title+props.title} description={t.description} />)\r\n\r\n    return<div \r\n        className=\"bgBoardUI card\">\r\n        <div\r\n        onDragStart={(e:any)=>props.dragStartHandler(e,{title:props.title,tasks:props.tasks})}\r\n        onDragOver={(e:any)=>props.dragOverHandler(e)}\r\n        onDragEnd={(e:any)=>props.dragEndHandler(e)}\r\n        onDragLeave={(e:any)=>props.dragEndHandler(e)}\r\n        onDrop={(e:any)=>props.dropHandler(e,{title:props.title,tasks:props.tasks})}\r\n        draggable={true}\r\n        style={{fontSize:\"2em\"}}\r\n        className=\"card-header bg-white\">\r\n            <div className=\"left\">\r\n                {props.title}\r\n            </div>\r\n            <div className=\"right\">\r\n                <button \r\n                onClick={()=>setShow(true)}\r\n                className=\"btn btn-light bg-white\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-pencil\" viewBox=\"0 0 16 16\">\r\n                    <path d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\"/>\r\n                </svg>\r\n                </button>\r\n            </div>\r\n        </div>\r\n        {myError ? <div className=\"ErrorLog text-danger\">\r\n            {myError}\r\n        </div> : <div> </div>}\r\n        <div className=\"card-body\"\r\n        style={{minHeight:\"50px\",maxHeight:props.height-250,\r\n        overflowY:\"scroll\"}}\r\n        onDragOver={(e)=>props.dragOverHandlerTask(e)}\r\n        onDrop={tasks.length>0 ? ()=>{} : (e:any)=>props.dropHandlerTask(e,null,{\r\n            title:props.title,tasks:[]})}>\r\n            {tasks}\r\n        </div>\r\n        <button \r\n        onClick={()=>setMode(true)}\r\n        disabled={editMode}\r\n        style={{outline:\"none\",border:\"none\"}}\r\n        className=\"AddText mb-2\">\r\n            {editMode ? \r\n            <form onSubmit={addTaskUI}>\r\n            <div className=\"row\">\r\n                <div className=\"col-2\">\r\n                    <button\r\n                    type='reset'\r\n                    onClick={()=>{\r\n                        setText(\"\")\r\n                        setError(\"\")\r\n                        setMode(false)\r\n                    }}\r\n                    className=\"EmtyButton text-danger\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\" className=\"bi bi-x\" viewBox=\"0 0 16 16\">\r\n                        <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\"/>\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n                <div className=\"col-8\"><input \r\n            className=\"w-100\"\r\n            style={{outline:\"none\",\r\n            border:\"none\",\r\n            borderBottom:\"1px solid green\"}}\r\n            autoFocus={true}\r\n            onChange={(e)=>{\r\n                setText(e.target.value)\r\n            }} \r\n            value={text} />\r\n                </div>\r\n                <div className=\"col-2\">\r\n                    <button \r\n                    type=\"submit\"\r\n                    className=\"EmtyButton text-success\">\r\n                        +\r\n                    </button>\r\n                </div>\r\n            </div></form>\r\n            :  \"+ Add Task\" }\r\n        </button>\r\n        <Formik \r\n        enableReinitialize\r\n        initialValues={{title:props.title}}\r\n        onSubmit={(values)=>{\r\n            let updateList={title:openedList ? openedList.title : \"\",boards:[]} as ListType\r\n            updateList.boards=openedList ? openedList.boards.map(b=>{\r\n                if(b.title===props.title){\r\n                    return {\r\n                        title:values.title,\r\n                        tasks:props.tasks\r\n                    }\r\n                }\r\n                return b\r\n                }) : []\r\n            dispatch(setBoards(updateList.boards))\r\n            setShow(false)\r\n        }}\r\n        validate={(values)=>{\r\n            let errors={title:\"\"}\r\n            if(!values.title){\r\n                return {title:\"Please enter title\"}\r\n            }\r\n            openedList?.boards.forEach(b=>{\r\n                if(b.title!==props.title && b.title===values.title){\r\n                    errors.title=\"This title have already exist\"\r\n                }\r\n            })\r\n            if(!errors.title) return {}\r\n            else return errors\r\n        }}\r\n        >{({\r\n            values,\r\n            errors,\r\n            handleSubmit,\r\n            handleChange\r\n        })=><form onSubmit={handleSubmit}>\r\n        <Modal show={show} onHide={()=>setShow(false)}>\r\n            <Modal.Header closeButton>\r\n                Change board\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                Title:\r\n                <input \r\n                name=\"title\"\r\n                value={values.title}\r\n                onChange={handleChange}\r\n                className=\"form-control\"\r\n                />\r\n                {errors && <div className=\"text-danger\">\r\n                    {errors.title} \r\n                </div>}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <button \r\n                onClick={onDelete}\r\n                className=\"btn btn-danger\">\r\n                    Delete\r\n                </button>\r\n                <MyNaughtyButton/>\r\n            </Modal.Footer>\r\n        </Modal></form>}\r\n        </Formik>\r\n    </div>\r\n} \r\n\r\ntype PropsButtonType={}\r\nconst MyNaughtyButton:React.FC<PropsButtonType>=(props)=>{\r\n    \r\n    let {submitForm}=useFormikContext()\r\n\r\n    return<button\r\n    onClick={()=>submitForm()}\r\n    className=\"btn btn-success\">\r\n        Save\r\n    </button>\r\n}\r\n","\r\ntype PropsType={\r\n    dropHandler:(e:any)=>void\r\n    dragOverHandler:(e:any)=>void\r\n    isPC:boolean\r\n    show:boolean\r\n}\r\nexport const Bucket:React.FC<PropsType>=(props)=>{\r\n    const forPC={\r\n        position:\"fixed\" as \"fixed\",\r\n        top:\"85%\",\r\n        left:\"15%\",\r\n        outline:\"none\",\r\n        border:0,\r\n        borderRadius:\"20000px\"\r\n    }\r\n    const forMB={\r\n        position:\"fixed\" as \"fixed\",\r\n        top:\"80%\",\r\n        left:\"5%\",\r\n        outline:\"none\",\r\n        border:0,\r\n        borderRadius:\"20000px\"\r\n    }\r\n    return props.show ? <button \r\n    onDrop={(e:any)=>props.dropHandler(e)}\r\n    onDragOver={(e:any)=>{\r\n        e.target.style.background=\"gray\"\r\n        props.dragOverHandler(e)\r\n    }}\r\n    onDragLeave={(e:any)=>{\r\n        e.target.style.background=\"lightgray\"\r\n    }}    \r\n    style={props.isPC ? forPC : forMB} \r\n    className=\"Bucket pt-4\">\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fill=\"currentColor\" className=\"bi bi-archive\" viewBox=\"0 0 16 16\">\r\n            <path d=\"M0 2a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1v7.5a2.5 2.5 0 0 1-2.5 2.5h-9A2.5 2.5 0 0 1 1 12.5V5a1 1 0 0 1-1-1V2zm2 3v7.5A1.5 1.5 0 0 0 3.5 14h9a1.5 1.5 0 0 0 1.5-1.5V5H2zm13-3H1v2h14V2zM5 7.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z\"/>\r\n        </svg>\r\n    </button> : <span style={props.isPC ? forPC : forMB}></span>\r\n}","import { useEffect, useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { addBoard, setBoard, setBoards, setOpenedBoard, setOpenedList } from \"../../BLL/Reducers/MainReducer\"\r\nimport { getLists, getOpenedList } from \"../../BLL/Selectors/mainSelector\"\r\nimport { BoardType, ListType, TaskType } from \"../../Types/Type\"\r\nimport { Plus } from \"../Bricks/Plus\"\r\nimport { Header } from \"./Header\";\r\nimport { AddList } from \"../MainPage/AddList\";\r\nimport { BoardItem } from \"../Bricks/BoardItem\"\r\nimport { Bucket } from \"../Bricks/Bucket\"\r\n\r\ntype PropsType={\r\n    height:number\r\n    isPC:boolean\r\n}\r\nexport const ListPage:React.FC<PropsType>=(props)=>{\r\n    \r\n    let [currentCard,setCard]=useState<BoardType | null>(null)\r\n\r\n    //start - For replace tasks\r\n    let [showBucket,setShowBucket]=useState(false)\r\n    let [currentBoard,setCurrentBoard]=useState<null | BoardType>(null)\r\n    let [currentTask,setCurrentTask]=useState<null | TaskType>(null)\r\n    const dragStartHandlerTask=(e:any,task:TaskType,board:BoardType)=>{\r\n        setCurrentTask(task)\r\n        setCurrentBoard(board)\r\n        setShowBucket(true)\r\n    }\r\n    const dragEndHandlerTask=(e:any)=>{\r\n        setShowBucket(false)\r\n    }\r\n    const dragOverHandlerTask=(e:any)=>{\r\n        //@ts-ignore\r\n        e.preventDefault()\r\n    }\r\n    const dropHandlerTask=(e:any,task:TaskType | null,board:BoardType | null)=>{\r\n        //@ts-ignore\r\n        e.preventDefault()\r\n        let oldBoard=currentBoard\r\n        //@ts-ignore\r\n        oldBoard.tasks=currentBoard.tasks.filter(o=>o.title!==currentTask.title)\r\n        //@ts-ignore\r\n        dispatch(setBoard(oldBoard))\r\n        if(board){\r\n        if(board.title!==currentBoard?.title && task){\r\n            let i1=0\r\n            board.tasks.forEach((t,index)=>{\r\n                if(t.title===task.title){\r\n                    i1=index\r\n                }\r\n            })\r\n            board.tasks.push({title:\"\",description:\"\"})\r\n            for(let i=board.tasks.length-1;i>i1;i--){\r\n                let t=board.tasks[i]\r\n                board.tasks[i]=board.tasks[i-1]\r\n                board.tasks[i-1]=t\r\n            }\r\n            board.tasks[i1]=currentTask as TaskType\r\n            dispatch(setBoard(board))\r\n        }else if(task){\r\n            let i1=0\r\n            let i2=0\r\n            board.tasks.forEach((t,index)=>{\r\n                if(t.title===task.title){\r\n                    i1=index\r\n                }\r\n                if(t.title===currentTask?.title){\r\n                    i2=index\r\n                }\r\n            })\r\n            let t=board.tasks[i1]\r\n            board.tasks[i1]=board.tasks[i2]\r\n            board.tasks[i2]=t\r\n            dispatch(setBoard(board))\r\n        }else{\r\n            board.tasks.push(currentTask as TaskType)\r\n            dispatch(setBoard(board))\r\n        }}\r\n        setShowBucket(false)\r\n    }\r\n    //For replace tasks - end\r\n\r\n\r\n    //start - For replace Boards\r\n    const dragStartHandler=(e:any,card:BoardType)=>{\r\n        setCard(card)\r\n    }\r\n    const dragEndHandler=(e:any)=>{\r\n        e.target.style.background=\"white\"\r\n    }\r\n    const dragOverHandler=(e:any)=>{\r\n        //@ts-ignore\r\n        e.preventDefault()\r\n        //@ts-ignore\r\n        e.target.style.background=\"lightgray\"\r\n    }\r\n    const dropHandler=(e:any,card:BoardType)=>{\r\n        //@ts-ignore\r\n        e.target.style.background=\"white\"\r\n        e.preventDefault()\r\n        let boards=openedList?.boards\r\n        let t=null as null | BoardType\r\n        let i1=0\r\n        let i2=0\r\n        boards?.forEach((b,index)=>{\r\n            if(b.title==currentCard?.title){\r\n                i1=index\r\n            }\r\n            if(b.title==card.title){\r\n                i2=index\r\n            }\r\n        })\r\n        t=boards ? boards[i1] : null\r\n        //@ts-ignore\r\n        boards[i1]=boards[i2]\r\n        //@ts-ignore\r\n        boards[i2]=t\r\n        //@ts-ignore\r\n        dispatch(setBoards(boards))\r\n    }\r\n    //For replace Boards - end\r\n\r\n\r\n\r\n    \r\n    let [show,setShow]=useState(false)\r\n    const closeHandler= ()=>{\r\n        setShow(false)\r\n    }\r\n    const openHandler=()=>{setShow(true)}\r\n    \r\n    const addBoardWithDispatch=(text:string)=>{\r\n        dispatch(addBoard(text))\r\n    }\r\n\r\n    const history=useHistory()\r\n    const dispatch=useDispatch()\r\n    const lists=useSelector(getLists)\r\n    const openedList=useSelector(getOpenedList)\r\n    useEffect(()=>{\r\n        const url=new URL(\"https://wws/\"+history.location.search)\r\n        const listName=url.searchParams.get(\"title\")\r\n        let openList=null as null | ListType\r\n        lists.forEach(l=>{\r\n            if(l.title===listName){openList=l}\r\n        })\r\n        if (openList) dispatch(setOpenedList(openList))\r\n    },[lists])\r\n\r\n    const boards=openedList?.boards.map(o=>{\r\n        return <BoardItem \r\n        height={props.height}\r\n        dragEndHandlerTask={dragEndHandlerTask}\r\n        dragOverHandlerTask={dragOverHandlerTask}\r\n        dragStartHandlerTask={dragStartHandlerTask}\r\n        dropHandlerTask={dropHandlerTask}\r\n\r\n        dragStartHandler={dragStartHandler}\r\n        dragOverHandler={dragOverHandler}\r\n        dragEndHandler={dragEndHandler}\r\n        dropHandler={dropHandler}\r\n        title={o.title} tasks={o.tasks} \r\n        />})\r\n    return<div \r\n        style={{height:props.height,overflowX:\"scroll\"}}\r\n        className=\"bgListUI\">\r\n            <Header isPC={props.isPC} title={openedList?.title ? openedList?.title : \"Pricol\"  } />\r\n            <div style={{\r\n                marginTop:\"4em\",\r\n                width:(375*(boards ? boards.length : 0))}}>\r\n                {boards}\r\n            </div>\r\n            <div>\r\n                \r\n            </div>\r\n            <Plus isPC={props.isPC} function={openHandler} />\r\n            <AddList show={show} closeHandler={closeHandler}\r\n            addFunction={addBoardWithDispatch} title=\"board\"\r\n            borrowedGroup={openedList ? openedList.boards : []} />\r\n            <Bucket show={showBucket}\r\n            dropHandler={(e:any)=>dropHandlerTask(e,null,null)}\r\n            isPC={props.isPC} dragOverHandler={dragOverHandlerTask} />\r\n        <div>\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { MainPage } from './UI/MainPage/MainPage';\nimport { Switch,Route } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { useEffect } from 'react';\nimport { ListPage } from './UI/ListPage/ListPage';\n\n\nexport const delay = (ms:number) => new Promise(resolve => setTimeout(resolve, ms))\nfunction App() {\n  let [isPC,setMode]=useState(true)\n  let [height,setHeight]=useState(window.innerHeight)\n  let setCurrentMode=(e:UIEvent)=>{\n    if (window.innerWidth>760){\n      setMode(true)\n    }else{\n      setMode(false)\n    }\n    setHeight(window.innerHeight)\n  }\n  useEffect(()=>{\n    window.addEventListener(\"resize\",setCurrentMode)\n    if (window.innerWidth>760){\n      setMode(true)\n    }else{\n      setMode(false)\n    }\n    return (()=>{\n      window.removeEventListener(\"resize\",setCurrentMode)\n    })\n  },[])\n\n  return (\n    <div className=\"\">\n      <Switch>\n        <Route path=\"/board\" render={()=><ListPage height={height} isPC={isPC} /> } />\n        <Route path=\"*\" render={()=><MainPage height={height} isPC={isPC} />}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore } from \"redux\";\r\nimport { mainReducer } from \"./Reducers/MainReducer\";\r\n\r\n\r\nlet rootReducer=combineReducers({\r\n    main:mainReducer\r\n    })\r\ntype RootReducerType=typeof rootReducer\r\nexport type AppStateType=ReturnType<RootReducerType> \r\n\r\nexport let store=createStore(rootReducer)\r\n//@ts-ignore\r\nwindow.store=store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './BLL/store';\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}