{"version":3,"sources":["UI/Bricks/Plus.tsx","UI/MainPage/Header.tsx","UI/MainPage/AddList.tsx","BLL/Reducers/MainReducer.ts","BLL/Selectors/mainSelector.tsx","UI/Bricks/ListItem.tsx","UI/MainPage/MainPage.tsx","UI/ListPage/Header.tsx","UI/Bricks/TaskItem.tsx","UI/Bricks/BoardItem.tsx","UI/Bricks/Bucket.tsx","UI/ListPage/ListPage.tsx","App.tsx","reportWebVitals.ts","BLL/store.ts","index.tsx"],"names":["Plus","memo","props","onClick","function","style","isPC","position","top","left","outline","border","className","Header","AddList","enableReinitialize","initialValues","text","validate","values","errors","borrowedGroup","forEach","b","title","onSubmit","addFunction","closeHandler","touched","handleChange","handleSubmit","Modal","show","onHide","closeButton","Title","Body","name","value","onChange","required","Footer","type","MyNaughtyButton","submitForm","useFormikContext","disabled","ADD_LIST","ADD_BOARD","ADD_TASK","SET_OPENED_LIST","SET_OPENED_BOARD","SET_OPENED_TASK","SET_BOARDS","SET_BOARD","SET_LISTS","initialState","openedList","openedBoard","openedTask","lists","setLists","setBoard","board","setBoards","boards","getLists","state","main","getOpenedList","ListItem","history","useHistory","toList","a","delay","push","pathname","search","useState","setShow","dispatch","useDispatch","useSelector","onDelete","useCallback","newLists","filter","l","xmlns","width","height","fill","viewBox","d","map","MainPage","listsJSX","index","addListWithDispatch","setShowToast","showToast","openHandler","reverse","length","display","justifyContent","alignItems","Toast","autohide","onClose","goToLists","fontSize","borderBottom","fillRule","TaskItem","updateBoard","tasks","t","onDoubleClick","onDragStart","e","dragStartHandler","description","onDragEnd","dragEndHandler","onDragLeave","onDragOver","dragOverHandler","onDrop","dropHandler","draggable","cursor","key","updateTask","BoardItem","updateList","setText","editMode","setMode","myError","setError","addTaskUI","check","useMemo","dragEndHandlerTask","dragOverHandlerTask","dragStartHandlerTask","dropHandlerTask","minHeight","maxHeight","overflowY","autoFocus","target","Bucket","forPC","borderRadius","forMB","background","ListPage","currentCard","setCard","showBucket","setShowBucket","currentBoard","setCurrentBoard","currentTask","setCurrentTask","task","preventDefault","oldBoard","o","i1","i","i2","card","addBoardWithDispatch","useEffect","listName","URL","location","searchParams","get","openList","list","overflowX","marginTop","ms","Promise","resolve","setTimeout","App","window","innerHeight","setHeight","setCurrentMode","innerWidth","addEventListener","removeEventListener","dates","JSON","parse","localStorage","getItem","setItem","stringify","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eee191ce.chunk.js","sourcesContent":["import { memo } from \"react\";\r\n\r\ntype Props = {\r\n  function: () => void;\r\n  isPC: boolean;\r\n};\r\nexport const Plus = memo<Props>((props) => {\r\n  const forPC = {\r\n    position: \"fixed\" as \"fixed\",\r\n    top: \"85%\",\r\n    left: \"90%\",\r\n    outline: \"none\",\r\n    border: 0,\r\n  };\r\n  const forMB = {\r\n    position: \"fixed\" as \"fixed\",\r\n    top: \"80%\",\r\n    left: \"75%\",\r\n    outline: \"none\",\r\n    border: 0,\r\n  };\r\n  return (\r\n    <button\r\n      onClick={props.function}\r\n      style={props.isPC ? forPC : forMB}\r\n      className=\"Plus\"\r\n    >\r\n      +\r\n    </button>\r\n  );\r\n});\r\n","import { memo } from \"react\";\r\n\r\nexport const Header = memo(() => {\r\n  return <div className=\"MainHeader\">My Lists</div>;\r\n});\r\n","import { Formik, useFormikContext } from \"formik\";\r\nimport { memo } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\n\r\ntype Props = {\r\n  show: boolean;\r\n  closeHandler: () => void;\r\n  addFunction: (text: string) => void;\r\n  borrowedGroup: any[];\r\n  title: string;\r\n};\r\n\r\nexport const AddList = memo<Props>((props) => {\r\n  return (\r\n    <Formik\r\n      enableReinitialize\r\n      initialValues={{ text: \"\" }}\r\n      validate={(values) => {\r\n        let errors = { text: \"\" };\r\n        props.borrowedGroup.forEach((b) => {\r\n          if (b.title === values.text) {\r\n            errors.text = \"Its title have already exist\";\r\n          }\r\n        });\r\n        return errors.text ? errors : {};\r\n      }}\r\n      onSubmit={(values) => {\r\n        props.addFunction(values.text);\r\n        values.text = \"\";\r\n        props.closeHandler();\r\n      }}\r\n    >\r\n      {({ values, errors, touched, handleChange, handleSubmit }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <Modal\r\n            show={props.show}\r\n            onHide={props.closeHandler}\r\n          >\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Add {props.title}</Modal.Title>\r\n            </Modal.Header>\r\n            <div>\r\n              <Modal.Body>\r\n                Title:\r\n                <div>\r\n                  <input\r\n                    className={\r\n                      errors.text && touched.text\r\n                        ? \"form-control w-100 is-invalid\"\r\n                        : \"form-control w-100\"\r\n                    }\r\n                    name=\"text\"\r\n                    value={values.text}\r\n                    onChange={handleChange}\r\n                    required\r\n                  />\r\n                </div>\r\n                {errors.text && touched.text && (\r\n                  <div className=\"text-danger\">{errors.text}</div>\r\n                )}\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button type=\"reset\" className=\"btn btn-danger\" onClick={props.closeHandler}>\r\n                  Close\r\n                </button>\r\n                <MyNaughtyButton text={values.text} errors={errors} />\r\n              </Modal.Footer>\r\n            </div>\r\n          </Modal>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n});\r\n\r\ntype ButtonProps = {\r\n  text: string;\r\n  errors: any;\r\n};\r\n\r\nconst MyNaughtyButton = memo<ButtonProps>((props) => {\r\n  const { submitForm } = useFormikContext();\r\n  return (\r\n    <button\r\n      onClick={() => {\r\n        if (props.text && !(props.errors && props.errors.text)) {\r\n          submitForm();\r\n        }\r\n      }}\r\n      disabled={props.errors.text || !props.text ? true : false}\r\n      className=\"btn btn-success\"\r\n    >\r\n      Add\r\n    </button>\r\n  );\r\n});\r\n","import { BoardType, ListType, TaskType } from \"../../Types/Type\";\r\n\r\nconst ADD_LIST: \"MainReducer/ADD_LIST\" = \"MainReducer/ADD_LIST\";\r\nconst ADD_BOARD: \"MainReducer/ADD_BOARD\" = \"MainReducer/ADD_BOARD\";\r\nconst ADD_TASK: \"MainReducer/ADD_TASK\" = \"MainReducer/ADD_TASK\";\r\nconst SET_OPENED_LIST: \"MainReducer/SET_OPENED_LIST\" =\r\n  \"MainReducer/SET_OPENED_LIST\";\r\nconst SET_OPENED_BOARD: \"MainReducer/SET_OPENED_BOARD\" =\r\n  \"MainReducer/SET_OPENED_BOARD\";\r\nconst SET_OPENED_TASK: \"MainReducer/SET_OPENED_TASK\" =\r\n  \"MainReducer/SET_OPENED_TASK\";\r\nconst SET_BOARDS: \"MainReducer/SET_BOARDS\" = \"MainReducer/SET_BOARDS\";\r\nconst SET_BOARD: \"MainReducer/SET_BOARD\" = \"MainReducer/SET_BOARD\";\r\nconst SET_LISTS: \"MainReducer/SET_LISTS\" = \"MainReducer/SET_LISTS\";\r\n\r\nconst initialState = {\r\n  openedList: null as null | ListType,\r\n  openedBoard: null as null | BoardType,\r\n  openedTask: null as null | TaskType,\r\n  lists: [] as ListType[],\r\n};\r\ntype InitialStateType = typeof initialState;\r\ntype ActionType =\r\n  | AddListType\r\n  | AddBoardType\r\n  | AddTaskType\r\n  | SetOpenedTaskType\r\n  | SetOpenedBoardType\r\n  | SetOpenedListType\r\n  | SetBoardsType\r\n  | SetBoardType\r\n  | SetListsType;\r\n\r\nexport const mainReducer = (\r\n  state = initialState,\r\n  action: ActionType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case SET_LISTS:\r\n      return {\r\n        ...state,\r\n        lists: [...action.lists],\r\n      };\r\n    case SET_BOARD:\r\n      return {\r\n        ...state,\r\n        lists: state.lists.map((l) => {\r\n          if (state.openedList?.title === l.title) {\r\n            l.boards = l.boards.map((b) => {\r\n              if (b.title === action.board.title) {\r\n                b.tasks = action.board.tasks;\r\n                b.title = action.board.title;\r\n                return b;\r\n              }\r\n              return b;\r\n            });\r\n          }\r\n          return l;\r\n        }),\r\n      };\r\n    case SET_BOARDS:\r\n      return {\r\n        ...state,\r\n        lists: [\r\n          ...state.lists.map((l) => {\r\n            if (l.title === state.openedList?.title) {\r\n              return {\r\n                title: l.title,\r\n                boards: [...action.boards],\r\n              };\r\n            }\r\n            return l;\r\n          }),\r\n        ],\r\n        openedList: {\r\n          title: state.openedList?.title as string,\r\n          boards: [...action.boards],\r\n        },\r\n      };\r\n    case SET_OPENED_LIST:\r\n      return { ...state, openedList: action.list };\r\n    case SET_OPENED_BOARD:\r\n      return { ...state, openedBoard: action.board };\r\n    case SET_OPENED_TASK:\r\n      return { ...state, openedTask: action.task };\r\n    case ADD_LIST:\r\n      return {\r\n        ...state,\r\n        lists: [...state.lists, { title: action.title, boards: [] }],\r\n      };\r\n    case ADD_BOARD:\r\n      return {\r\n        ...state,\r\n        lists: state.lists.map((l) => {\r\n          if (state.openedList && state.openedList.title === l.title) {\r\n            l.boards.push({ title: action.title, tasks: [] });\r\n          }\r\n          return l;\r\n        }),\r\n        openedList: {\r\n          title: state.openedList?.title as string,\r\n          boards: [\r\n            ...(state.openedList?.boards as BoardType[]),\r\n            { title: action.title, tasks: [] },\r\n          ],\r\n        },\r\n      };\r\n    case ADD_TASK:\r\n      return {\r\n        ...state,\r\n        lists: state.lists.map((l) => {\r\n          if (state.openedList && state.openedList.title === l.title) {\r\n            l.boards = l.boards.map((b) => {\r\n              if (state.openedBoard && state.openedBoard.title === b.title) {\r\n                b.tasks.push({ title: action.title, description: \"\" });\r\n              }\r\n              return b;\r\n            });\r\n          }\r\n          return l;\r\n        }),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype SetListsType = {\r\n  type: typeof SET_LISTS;\r\n  lists: ListType[];\r\n};\r\nexport const setLists = (lists: ListType[]): SetListsType => {\r\n  return {\r\n    type: SET_LISTS,\r\n    lists,\r\n  };\r\n};\r\n\r\ntype SetBoardType = {\r\n  type: typeof SET_BOARD;\r\n  board: BoardType;\r\n};\r\nexport const setBoard = (board: BoardType): SetBoardType => {\r\n  return {\r\n    type: SET_BOARD,\r\n    board,\r\n  };\r\n};\r\n\r\ntype SetBoardsType = {\r\n  type: typeof SET_BOARDS;\r\n  boards: BoardType[];\r\n};\r\nexport const setBoards = (boards: BoardType[]): SetBoardsType => {\r\n  return {\r\n    type: SET_BOARDS,\r\n    boards,\r\n  };\r\n};\r\n\r\ntype AddListType = {\r\n  type: typeof ADD_LIST;\r\n  title: string;\r\n};\r\nexport const addList = (title: string): AddListType => {\r\n  return {\r\n    type: ADD_LIST,\r\n    title,\r\n  };\r\n};\r\n\r\ntype AddBoardType = {\r\n  type: typeof ADD_BOARD;\r\n  title: string;\r\n};\r\nexport const addBoard = (title: string): AddBoardType => {\r\n  return {\r\n    type: ADD_BOARD,\r\n    title,\r\n  };\r\n};\r\n\r\ntype AddTaskType = {\r\n  type: typeof ADD_TASK;\r\n  title: string;\r\n};\r\nexport const addTask = (title: string): AddTaskType => {\r\n  return {\r\n    type: ADD_TASK,\r\n    title,\r\n  };\r\n};\r\n\r\ntype SetOpenedListType = {\r\n  type: typeof SET_OPENED_LIST;\r\n  list: ListType;\r\n};\r\nexport const setOpenedList = (list: ListType): SetOpenedListType => {\r\n  return {\r\n    type: SET_OPENED_LIST,\r\n    list,\r\n  };\r\n};\r\n\r\ntype SetOpenedBoardType = {\r\n  type: typeof SET_OPENED_BOARD;\r\n  board: BoardType;\r\n};\r\nexport const setOpenedBoard = (board: BoardType): SetOpenedBoardType => {\r\n  return {\r\n    type: SET_OPENED_BOARD,\r\n    board,\r\n  };\r\n};\r\n\r\ntype SetOpenedTaskType = {\r\n  type: typeof SET_OPENED_TASK;\r\n  task: TaskType;\r\n};\r\nexport const setOpenedTask = (task: TaskType): SetOpenedTaskType => {\r\n  return {\r\n    type: SET_OPENED_TASK,\r\n    task,\r\n  };\r\n};\r\n","import { ListItem } from \"../../UI/Bricks/ListItem\";\r\nimport { AppStateType } from \"../store\";\r\n\r\nexport const getLists = (state: AppStateType) => {\r\n  return state.main.lists;\r\n};\r\nexport const getOpenedList = (state: AppStateType) => {\r\n  return state.main.openedList;\r\n};\r\nexport const getOpenedBoard = (state: AppStateType) => {\r\n  return state.main.openedBoard;\r\n};\r\n","import { Formik, useFormikContext } from \"formik\";\r\nimport { memo, useCallback, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { delay } from \"../../App\";\r\nimport { setLists } from \"../../BLL/Reducers/MainReducer\";\r\nimport { getLists } from \"../../BLL/Selectors/mainSelector\";\r\n\r\ntype Props = {\r\n  title: string;\r\n};\r\n\r\nexport const ListItem = memo<Props>((props) => {\r\n  const history = useHistory();\r\n  const toList = async () => {\r\n    await delay(1000);\r\n    history.push({\r\n      pathname: \"/board\",\r\n      search: \"title=\" + props.title,\r\n    });\r\n  };\r\n\r\n  const [show, setShow] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const lists = useSelector(getLists);\r\n  const onDelete = useCallback(() => {\r\n    const newLists = lists.filter((l) => l.title !== props.title);\r\n    dispatch(setLists(newLists));\r\n    setShow(false);\r\n  }, [lists, props.title]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <button\r\n        style={{ outline: \"none\" }}\r\n        onClick={toList}\r\n        className=\"ListItem mt-3 container col-11\"\r\n        key={props.title}\r\n      >\r\n        {props.title}\r\n      </button>\r\n      <button\r\n        onClick={() => setShow(true)}\r\n        className=\"btn btn-light col-1 mt-3\"\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"20\"\r\n          height=\"20\"\r\n          fill=\"currentColor\"\r\n          className=\"bi bi-pencil\"\r\n          viewBox=\"0 0 16 16\"\r\n        >\r\n          <path d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\" />\r\n        </svg>\r\n      </button>\r\n      <Formik\r\n        initialValues={{ title: props.title }}\r\n        onSubmit={(values) => {\r\n          const newLists = lists.map((l) => {\r\n            if (l.title === props.title) {\r\n              return {\r\n                title: values.title,\r\n                boards: l.boards,\r\n              };\r\n            }\r\n            return l;\r\n          });\r\n          dispatch(setLists(newLists));\r\n          setShow(false);\r\n        }}\r\n        validate={(values) => {\r\n          let errors = { title: \"\" };\r\n          if (!values.title) {\r\n            return { title: \"Please enter title\" };\r\n          }\r\n          lists.forEach((l) => {\r\n            if (l.title !== props.title && l.title === values.title) {\r\n              errors.title = \"This title have already exist\";\r\n            }\r\n          });\r\n          if (!errors.title) return {};\r\n          else return errors;\r\n        }}\r\n      >\r\n        {({ handleSubmit, handleChange, values, errors }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <Modal show={show} onHide={() => setShow(false)}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Change list</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                Title:{\" \"}\r\n                <input\r\n                  className=\"form-control\"\r\n                  value={values.title}\r\n                  name=\"title\"\r\n                  onChange={handleChange}\r\n                />\r\n                <div className=\"text-danger\">{errors && errors.title}</div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button type=\"reset\" onClick={onDelete} className=\"btn btn-danger\">\r\n                  Delete\r\n                </button>\r\n                <MyNaughtyButton />\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst MyNaughtyButton = memo(() => {\r\n  const { submitForm } = useFormikContext();\r\n  return (\r\n    <button onClick={submitForm} className=\"btn btn-success\">\r\n      Save\r\n    </button>\r\n  );\r\n});\r\n","import React, { memo, useCallback, useState } from \"react\";\r\nimport { Plus } from \"../Bricks/Plus\";\r\nimport { Header } from \"./Header\";\r\nimport { AddList } from \"./AddList\";\r\nimport { addList } from \"../../BLL/Reducers/MainReducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getLists } from \"../../BLL/Selectors/mainSelector\";\r\nimport { ListItem } from \"../Bricks/ListItem\";\r\nimport { Toast } from \"react-bootstrap\";\r\n\r\ntype Props = {\r\n  isPC: boolean;\r\n  height: number;\r\n};\r\n\r\nexport const MainPage = memo<Props>((props) => {\r\n  const lists = useSelector(getLists);\r\n  const listsJSX = lists.map((l, index) => (\r\n    <ListItem key={index} title={l.title} />\r\n  ));\r\n\r\n  const dispatch = useDispatch();\r\n  const addListWithDispatch = useCallback((text: string) => {\r\n    dispatch(addList(text));\r\n    setShowToast(true);\r\n  }, []);\r\n\r\n  const [showToast, setShowToast] = useState(false);\r\n\r\n  const [show, setShow] = useState(false);\r\n  const closeHandler = useCallback(() => {\r\n    setShow(false);\r\n  }, []);\r\n  const openHandler = useCallback(() => {\r\n    setShow(true);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"container mt-4\">{[...listsJSX].reverse()}</div>\r\n      <div className=\"text-center prompt\">\r\n        {listsJSX.length == 0 && \"To create list tap +\"}\r\n      </div>\r\n      <Plus isPC={props.isPC} function={openHandler} />\r\n      <AddList\r\n        show={show}\r\n        closeHandler={closeHandler}\r\n        title={\"list\"}\r\n        addFunction={addListWithDispatch}\r\n        borrowedGroup={lists}\r\n      />\r\n      <div\r\n        className=\"ml-4\"\r\n        style={{\r\n          position: \"fixed\",\r\n          display: \"flex\",\r\n          justifyContent: \"flex-end\",\r\n          alignItems: \"flex-end\",\r\n          height: props.height - 400,\r\n        }}\r\n      >\r\n        <Toast\r\n          show={showToast}\r\n          autohide\r\n          onClose={() => setShowToast(false)}\r\n          delay={3000}\r\n        >\r\n          <Toast.Header>\r\n            <strong className=\"mr-auto\">Notice</strong>\r\n          </Toast.Header>\r\n          <Toast.Body>New list added successfull</Toast.Body>\r\n        </Toast>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import { memo, useCallback } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\ntype Props = {\r\n  title: string;\r\n  isPC: boolean;\r\n};\r\n\r\nexport const Header = memo<Props>((props) => {\r\n  const history = useHistory();\r\n  const goToLists = useCallback(() => {\r\n    history.push({\r\n      pathname: \"/\",\r\n    });\r\n  }, []);\r\n  return (\r\n    <div\r\n      style={{ fontSize: \"2.5em\", borderBottom: \"1px black solid\" }}\r\n      className={\"bg-primary fixed-top text-white\"}\r\n    >\r\n      <button\r\n        onClick={goToLists}\r\n        style={{ outline: \"none\", border: \"none\" }}\r\n        title={\"Go to lists\"}\r\n        className=\"EmtyButton bg-primary text-white\"\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width=\"30\"\r\n          height=\"30\"\r\n          fill=\"currentColor\"\r\n          className=\"bi bi-arrow-left\"\r\n          viewBox=\"0 0 16 16\"\r\n        >\r\n          <path\r\n            fillRule=\"evenodd\"\r\n            d=\"M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z\"\r\n          />\r\n        </svg>\r\n      </button>\r\n      {props.title}\r\n    </div>\r\n  );\r\n});\r\n","import { Formik, useFormikContext } from \"formik\";\r\nimport { memo, useCallback, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setBoard } from \"../../BLL/Reducers/MainReducer\";\r\nimport { BoardType, TaskType } from \"../../Types/Type\";\r\n\r\ntype Props = {\r\n  title: string;\r\n  description: string;\r\n  key: string;\r\n  board: BoardType;\r\n  dragStartHandler: (e: any, task: TaskType, board: BoardType) => void;\r\n  dragEndHandler: (e: any) => void;\r\n  dragOverHandler: (e: any) => void;\r\n  dropHandler: (e: any, task: TaskType, board: BoardType) => void;\r\n};\r\n\r\nexport const TaskItem = memo<Props>((props) => {\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const dispatch = useDispatch();\r\n  const onDelete = useCallback(() => {\r\n    let updateBoard = {\r\n      title: props.board.title,\r\n      tasks: [],\r\n    } as BoardType;\r\n    updateBoard.tasks = props.board.tasks.filter(\r\n      (t) => t.title !== props.title\r\n    );\r\n    dispatch(setBoard(updateBoard));\r\n    setShow(false);\r\n  }, [props]);\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        onDoubleClick={() => setShow(true)}\r\n        onDragStart={(e: any) =>\r\n          props.dragStartHandler(\r\n            e,\r\n            { title: props.title, description: props.description },\r\n            props.board\r\n          )\r\n        }\r\n        onDragEnd={(e: any) => {\r\n          props.dragEndHandler(e);\r\n        }}\r\n        onDragLeave={(e: any) => {}}\r\n        onDragOver={(e: any) => props.dragOverHandler(e)}\r\n        onDrop={(e: any) =>\r\n          props.dropHandler(\r\n            e,\r\n            { title: props.title, description: props.description },\r\n            props.board\r\n          )\r\n        }\r\n        draggable={true}\r\n        style={{ fontSize: \"2em\", cursor: \"grab\" }}\r\n        key={props.key}\r\n        className=\"card mt-2 Task text-center\"\r\n      >\r\n        {props.title}\r\n      </div>\r\n      <Formik\r\n        initialValues={{\r\n          title: props.title,\r\n          description: props.description,\r\n        }}\r\n        onSubmit={(values) => {\r\n          let updateTask = {\r\n            title: values.title,\r\n            description: values.description,\r\n          } as TaskType;\r\n          let updateBoard = {\r\n            title: props.board.title,\r\n            tasks: [],\r\n          } as BoardType;\r\n          updateBoard.tasks = props.board.tasks.map((t, index) => {\r\n            if (t.title !== props.title) {\r\n              return t;\r\n            } else {\r\n              return updateTask;\r\n            }\r\n          });\r\n          dispatch(setBoard(updateBoard));\r\n          setShow(false);\r\n        }}\r\n        validate={(values) => {\r\n          let errors = {\r\n            title: \"\",\r\n          };\r\n          if (!values.title) {\r\n            errors.title = \"Please enter title\";\r\n            return errors;\r\n          }\r\n          props.board.tasks.forEach((b) => {\r\n            if (b.title !== props.title && b.title === values.title) {\r\n              errors.title = \"This title have already exist\";\r\n            }\r\n          });\r\n          if (!errors.title) return {};\r\n          else return errors;\r\n          //ToDo check on same name (props - allTasks)\r\n        }}\r\n      >\r\n        {({ handleChange, values, handleSubmit, errors }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <Modal show={show} onHide={() => setShow(false)}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Change Task</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div>\r\n                  Title:\r\n                  <input\r\n                    name=\"title\"\r\n                    onChange={handleChange}\r\n                    value={values.title}\r\n                    className=\"form-control\"\r\n                  />\r\n                  {errors.title && (\r\n                    <div className=\"text-danger\">{errors.title}</div>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  Description:\r\n                  <textarea\r\n                    onChange={handleChange}\r\n                    name=\"description\"\r\n                    className=\"form-control\"\r\n                  >\r\n                    {values.description}\r\n                  </textarea>\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button onClick={onDelete} className=\"btn btn-danger\">\r\n                  Delete\r\n                </button>\r\n                <MyNaughtyButton />\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst MyNaughtyButton = memo(() => {\r\n  const { submitForm } = useFormikContext();\r\n  return (\r\n    <button\r\n      onClick={() => {\r\n        submitForm();\r\n      }}\r\n      type=\"submit\"\r\n      className=\"btn btn-success\"\r\n    >\r\n      Save\r\n    </button>\r\n  );\r\n});\r\n","import { Formik, useFormikContext } from \"formik\";\r\nimport { memo, useCallback, useMemo, useState } from \"react\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  addTask,\r\n  setBoards,\r\n  setOpenedBoard,\r\n} from \"../../BLL/Reducers/MainReducer\";\r\nimport { getOpenedList } from \"../../BLL/Selectors/mainSelector\";\r\nimport { BoardType, ListType, TaskType } from \"../../Types/Type\";\r\nimport { TaskItem } from \"./TaskItem\";\r\n\r\ntype Props = {\r\n  title: string;\r\n  tasks: TaskType[];\r\n  height: number;\r\n  dragStartHandler: (e: any, card: BoardType) => void;\r\n  dragOverHandler: (e: any) => void;\r\n  dragEndHandler: (e: any) => void;\r\n  dropHandler: (e: any, card: BoardType) => void;\r\n  dragStartHandlerTask: (e: any, task: TaskType, board: BoardType) => void;\r\n  dragOverHandlerTask: (e: any) => void;\r\n  dragEndHandlerTask: (e: any) => void;\r\n  dropHandlerTask: (e: any, task: TaskType | null, board: BoardType) => void;\r\n};\r\n\r\nexport const BoardItem = memo<Props>((props) => {\r\n  const [show, setShow] = useState(false); //for modal\r\n  const openedList = useSelector(getOpenedList);\r\n  const onDelete = useCallback(() => {\r\n    let updateList = {\r\n      title: openedList ? openedList.title : \"\",\r\n      boards: [],\r\n    } as ListType;\r\n    updateList.boards = openedList\r\n      ? openedList.boards.filter((b) => b.title !== props.title)\r\n      : [];\r\n    dispatch(setBoards(updateList.boards));\r\n    setShow(false);\r\n  }, [openedList, props.title]);\r\n\r\n  const [text, setText] = useState(\"\"); //text which will be use for add task\r\n  const [editMode, setMode] = useState(false); //switch between addTask\r\n  const [myError, setError] = useState(\"\"); // to show error add Task(simmiliary title)\r\n  const dispatch = useDispatch();\r\n  const addTaskUI = useCallback(() => {\r\n    dispatch(setOpenedBoard({ title: props.title, tasks: props.tasks }));\r\n    setError(\"\");\r\n    let check = true;\r\n    props.tasks.forEach((t) => {\r\n      if (t.title === text) {\r\n        setError(\"This title have already exist\");\r\n        check = false;\r\n      }\r\n    });\r\n    if (!text) check = false;\r\n    if (check) {\r\n      dispatch(addTask(text));\r\n    }\r\n    setText(\"\");\r\n    setMode(false);\r\n  }, [props.title, props.tasks, text]);\r\n  const tasks = useMemo(\r\n    () =>\r\n      props.tasks.map((t, index) => (\r\n        <TaskItem\r\n          key={`${props.title}-task-${index}`}\r\n          dragEndHandler={props.dragEndHandlerTask}\r\n          dragOverHandler={props.dragOverHandlerTask}\r\n          dragStartHandler={props.dragStartHandlerTask}\r\n          dropHandler={props.dropHandlerTask}\r\n          title={t.title}\r\n          board={{ title: props.title, tasks: props.tasks }}\r\n          description={t.description}\r\n        />\r\n      )),\r\n    [props]\r\n  );\r\n\r\n  return (\r\n    <div className=\"bgBoardUI card\">\r\n      <div\r\n        onDragStart={(e: any) =>\r\n          props.dragStartHandler(e, { title: props.title, tasks: props.tasks })\r\n        }\r\n        onDragOver={(e: any) => props.dragOverHandler(e)}\r\n        onDragEnd={(e: any) => props.dragEndHandler(e)}\r\n        onDragLeave={(e: any) => props.dragEndHandler(e)}\r\n        onDrop={(e: any) =>\r\n          props.dropHandler(e, { title: props.title, tasks: props.tasks })\r\n        }\r\n        draggable={true}\r\n        style={{ fontSize: \"2em\" }}\r\n        className=\"card-header bg-white\"\r\n      >\r\n        <div className=\"left\">{props.title}</div>\r\n        <div className=\"right\">\r\n          <button\r\n            onClick={() => setShow(true)}\r\n            className=\"btn btn-light bg-white\"\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"25\"\r\n              height=\"25\"\r\n              fill=\"currentColor\"\r\n              className=\"bi bi-pencil\"\r\n              viewBox=\"0 0 16 16\"\r\n            >\r\n              <path d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {myError ? (\r\n        <div className=\"ErrorLog text-danger\">{myError}</div>\r\n      ) : (\r\n        <div> </div>\r\n      )}\r\n      <div\r\n        className=\"card-body\"\r\n        style={{\r\n          minHeight: \"50px\",\r\n          maxHeight: props.height - 250,\r\n          overflowY: \"scroll\",\r\n        }}\r\n        onDragOver={(e) => props.dragOverHandlerTask(e)}\r\n        onDrop={\r\n          tasks.length > 0\r\n            ? () => {}\r\n            : (e: any) =>\r\n                props.dropHandlerTask(e, null, {\r\n                  title: props.title,\r\n                  tasks: [],\r\n                })\r\n        }\r\n      >\r\n        {tasks}\r\n      </div>\r\n      <button\r\n        onClick={() => setMode(true)}\r\n        disabled={editMode}\r\n        style={{ outline: \"none\", border: \"none\" }}\r\n        className=\"AddText mb-2\"\r\n      >\r\n        {editMode ? (\r\n          <form onSubmit={addTaskUI}>\r\n            <div className=\"row\">\r\n              <div className=\"col-2\">\r\n                <button\r\n                  type=\"reset\"\r\n                  onClick={() => {\r\n                    setText(\"\");\r\n                    setError(\"\");\r\n                    setMode(false);\r\n                  }}\r\n                  className=\"EmtyButton text-danger\"\r\n                >\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"25\"\r\n                    height=\"25\"\r\n                    fill=\"currentColor\"\r\n                    className=\"bi bi-x\"\r\n                    viewBox=\"0 0 16 16\"\r\n                  >\r\n                    <path d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z\" />\r\n                  </svg>\r\n                </button>\r\n              </div>\r\n              <div className=\"col-8\">\r\n                <input\r\n                  className=\"w-100\"\r\n                  style={{\r\n                    outline: \"none\",\r\n                    border: \"none\",\r\n                    borderBottom: \"1px solid green\",\r\n                  }}\r\n                  autoFocus={true}\r\n                  onChange={(e) => {\r\n                    setText(e.target.value);\r\n                  }}\r\n                  value={text}\r\n                />\r\n              </div>\r\n              <div className=\"col-2\">\r\n                <button type=\"submit\" className=\"EmtyButton text-success\">\r\n                  +\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        ) : (\r\n          \"+ Add Task\"\r\n        )}\r\n      </button>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={{ title: props.title }}\r\n        onSubmit={(values) => {\r\n          let updateList = {\r\n            title: openedList ? openedList.title : \"\",\r\n            boards: [],\r\n          } as ListType;\r\n          updateList.boards = openedList\r\n            ? openedList.boards.map((b) => {\r\n                if (b.title === props.title) {\r\n                  return {\r\n                    title: values.title,\r\n                    tasks: props.tasks,\r\n                  };\r\n                }\r\n                return b;\r\n              })\r\n            : [];\r\n          dispatch(setBoards(updateList.boards));\r\n          setShow(false);\r\n        }}\r\n        validate={(values) => {\r\n          let errors = { title: \"\" };\r\n          if (!values.title) {\r\n            return { title: \"Please enter title\" };\r\n          }\r\n          openedList?.boards.forEach((b) => {\r\n            if (b.title !== props.title && b.title === values.title) {\r\n              errors.title = \"This title have already exist\";\r\n            }\r\n          });\r\n          if (!errors.title) return {};\r\n          else return errors;\r\n        }}\r\n      >\r\n        {({ values, errors, handleSubmit, handleChange }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <Modal show={show} onHide={() => setShow(false)}>\r\n              <Modal.Header closeButton>Change board</Modal.Header>\r\n              <Modal.Body>\r\n                Title:\r\n                <input\r\n                  name=\"title\"\r\n                  value={values.title}\r\n                  onChange={handleChange}\r\n                  className=\"form-control\"\r\n                />\r\n                {errors && <div className=\"text-danger\">{errors.title}</div>}\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button onClick={onDelete} className=\"btn btn-danger\">\r\n                  Delete\r\n                </button>\r\n                <MyNaughtyButton />\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst MyNaughtyButton = memo(() => {\r\n  const { submitForm } = useFormikContext();\r\n  return (\r\n    <button onClick={submitForm} className=\"btn btn-success\">\r\n      Save\r\n    </button>\r\n  );\r\n});\r\n","import { memo } from \"react\";\r\n\r\ntype Props = {\r\n  dropHandler: (e: any) => void;\r\n  dragOverHandler: (e: any) => void;\r\n  isPC: boolean;\r\n  show: boolean;\r\n};\r\nexport const Bucket = memo<Props>((props) => {\r\n  const forPC = {\r\n    position: \"fixed\" as \"fixed\",\r\n    top: \"85%\",\r\n    left: \"15%\",\r\n    outline: \"none\",\r\n    border: 0,\r\n    borderRadius: \"20000px\",\r\n  };\r\n  const forMB = {\r\n    position: \"fixed\" as \"fixed\",\r\n    top: \"80%\",\r\n    left: \"5%\",\r\n    outline: \"none\",\r\n    border: 0,\r\n    borderRadius: \"20000px\",\r\n  };\r\n  return props.show ? (\r\n    <button\r\n      onDrop={(e: any) => props.dropHandler(e)}\r\n      onDragOver={(e: any) => {\r\n        e.target.style.background = \"gray\";\r\n        props.dragOverHandler(e);\r\n      }}\r\n      onDragLeave={(e: any) => {\r\n        e.target.style.background = \"lightgray\";\r\n      }}\r\n      style={props.isPC ? forPC : forMB}\r\n      className=\"Bucket pt-4\"\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width=\"30\"\r\n        height=\"30\"\r\n        fill=\"currentColor\"\r\n        className=\"bi bi-archive\"\r\n        viewBox=\"0 0 16 16\"\r\n      >\r\n        <path d=\"M0 2a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1v7.5a2.5 2.5 0 0 1-2.5 2.5h-9A2.5 2.5 0 0 1 1 12.5V5a1 1 0 0 1-1-1V2zm2 3v7.5A1.5 1.5 0 0 0 3.5 14h9a1.5 1.5 0 0 0 1.5-1.5V5H2zm13-3H1v2h14V2zM5 7.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5z\" />\r\n      </svg>\r\n    </button>\r\n  ) : (\r\n    <span style={props.isPC ? forPC : forMB}></span>\r\n  );\r\n});\r\n","import { memo, useCallback, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  addBoard,\r\n  setBoard,\r\n  setBoards,\r\n  setOpenedList,\r\n} from \"../../BLL/Reducers/MainReducer\";\r\nimport { getLists, getOpenedList } from \"../../BLL/Selectors/mainSelector\";\r\nimport { BoardType, ListType, TaskType } from \"../../Types/Type\";\r\nimport { Plus } from \"../Bricks/Plus\";\r\nimport { Header } from \"./Header\";\r\nimport { AddList } from \"../MainPage/AddList\";\r\nimport { BoardItem } from \"../Bricks/BoardItem\";\r\nimport { Bucket } from \"../Bricks/Bucket\";\r\n\r\ntype Props = {\r\n  height: number;\r\n  isPC: boolean;\r\n};\r\n\r\nexport const ListPage = memo<Props>((props) => {\r\n  const [currentCard, setCard] = useState<BoardType | null>(null);\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const lists = useSelector(getLists);\r\n  const openedList = useSelector(getOpenedList);\r\n  const [showBucket, setShowBucket] = useState(false);\r\n  const [currentBoard, setCurrentBoard] = useState<null | BoardType>(null);\r\n  const [currentTask, setCurrentTask] = useState<null | TaskType>(null);\r\n  const dragStartHandlerTask = useCallback(\r\n    (e: any, task: TaskType, board: BoardType) => {\r\n      setCurrentTask(task);\r\n      setCurrentBoard(board);\r\n      setShowBucket(true);\r\n    },\r\n    []\r\n  );\r\n  const dragEndHandlerTask = useCallback((e: any) => {\r\n    setShowBucket(false);\r\n  }, []);\r\n  const dragOverHandlerTask = useCallback((e: any) => {\r\n    //@ts-ignore\r\n    e.preventDefault();\r\n  }, []);\r\n  const dropHandlerTask = useCallback(\r\n    (e: any, task: TaskType | null, board: BoardType | null) => {\r\n      //@ts-ignore\r\n      e.preventDefault();\r\n      let oldBoard = currentBoard;\r\n      //@ts-ignore\r\n      oldBoard.tasks = currentBoard.tasks.filter(\r\n        (o) => o.title !== currentTask?.title\r\n      );\r\n      //@ts-ignore\r\n      dispatch(setBoard(oldBoard));\r\n      if (board) {\r\n        if (board.title !== currentBoard?.title && task) {\r\n          let i1 = 0;\r\n          board.tasks.forEach((t, index) => {\r\n            if (t.title === task.title) {\r\n              i1 = index;\r\n            }\r\n          });\r\n          board.tasks.push({ title: \"\", description: \"\" });\r\n          for (let i = board.tasks.length - 1; i > i1; i--) {\r\n            let t = board.tasks[i];\r\n            board.tasks[i] = board.tasks[i - 1];\r\n            board.tasks[i - 1] = t;\r\n          }\r\n          board.tasks[i1] = currentTask as TaskType;\r\n          dispatch(setBoard(board));\r\n        } else if (task) {\r\n          let i1 = 0;\r\n          let i2 = 0;\r\n          board.tasks.forEach((t, index) => {\r\n            if (t.title === task.title) {\r\n              i1 = index;\r\n            }\r\n            if (t.title === currentTask?.title) {\r\n              i2 = index;\r\n            }\r\n          });\r\n          let t = board.tasks[i1];\r\n          board.tasks[i1] = board.tasks[i2];\r\n          board.tasks[i2] = t;\r\n          dispatch(setBoard(board));\r\n        } else {\r\n          board.tasks.push(currentTask as TaskType);\r\n          dispatch(setBoard(board));\r\n        }\r\n      }\r\n      setShowBucket(false);\r\n    },\r\n    [currentBoard, currentTask]\r\n  );\r\n\r\n  const dragStartHandler = useCallback((e: any, card: BoardType) => {\r\n    setCard(card);\r\n  }, []);\r\n  const dragEndHandler = useCallback((e: any) => {\r\n    e.target.style.background = \"white\";\r\n  }, []);\r\n  const dragOverHandler = useCallback((e: any) => {\r\n    //@ts-ignore\r\n    e.preventDefault();\r\n    //@ts-ignore\r\n    e.target.style.background = \"lightgray\";\r\n  }, []);\r\n  const dropHandler = useCallback(\r\n    (e: any, card: BoardType) => {\r\n      //@ts-ignore\r\n      e.target.style.background = \"white\";\r\n      e.preventDefault();\r\n      let boards = openedList?.boards;\r\n      let t = null as null | BoardType;\r\n      let i1 = 0;\r\n      let i2 = 0;\r\n      boards?.forEach((b, index) => {\r\n        if (b.title == currentCard?.title) {\r\n          i1 = index;\r\n        }\r\n        if (b.title == card.title) {\r\n          i2 = index;\r\n        }\r\n      });\r\n      t = boards ? boards[i1] : null;\r\n      //@ts-ignore\r\n      boards[i1] = boards[i2];\r\n      //@ts-ignore\r\n      boards[i2] = t;\r\n      //@ts-ignore\r\n      dispatch(setBoards(boards));\r\n    },\r\n    [openedList, currentCard]\r\n  );\r\n\r\n  const [show, setShow] = useState(false);\r\n  const closeHandler = useCallback(() => {\r\n    setShow(false);\r\n  }, []);\r\n  const openHandler = useCallback(() => {\r\n    setShow(true);\r\n  }, []);\r\n\r\n  const addBoardWithDispatch = useCallback((text: string) => {\r\n    dispatch(addBoard(text));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const url = new URL(\"https://wws/\" + history.location.search);\r\n    const listName = url.searchParams.get(\"title\");\r\n    let openList = null as null | ListType;\r\n    lists.forEach((l) => {\r\n      if (l.title === listName) {\r\n        openList = l;\r\n      }\r\n    });\r\n    if (openList) dispatch(setOpenedList(openList));\r\n  }, [lists]);\r\n\r\n  const boards = openedList?.boards.map((o, index) => {\r\n    return (\r\n      <BoardItem\r\n        key={`board-${index}`}\r\n        height={props.height}\r\n        dragEndHandlerTask={dragEndHandlerTask}\r\n        dragOverHandlerTask={dragOverHandlerTask}\r\n        dragStartHandlerTask={dragStartHandlerTask}\r\n        dropHandlerTask={dropHandlerTask}\r\n        dragStartHandler={dragStartHandler}\r\n        dragOverHandler={dragOverHandler}\r\n        dragEndHandler={dragEndHandler}\r\n        dropHandler={dropHandler}\r\n        title={o.title}\r\n        tasks={o.tasks}\r\n      />\r\n    );\r\n  });\r\n  return (\r\n    <div\r\n      style={{ height: props.height, overflowX: \"scroll\" }}\r\n      className=\"bgListUI\"\r\n    >\r\n      <Header\r\n        isPC={props.isPC}\r\n        title={openedList?.title ? openedList?.title : \"Pricol\"}\r\n      />\r\n      <div\r\n        style={{\r\n          marginTop: \"4em\",\r\n          width: 375 * (boards ? boards.length : 0),\r\n        }}\r\n      >\r\n        {boards}\r\n      </div>\r\n      <div className=\"text-center mt-4 prompt\">\r\n        {!boards?.length && \"To create board tap +\"}\r\n      </div>\r\n      <Plus isPC={props.isPC} function={openHandler} />\r\n      <AddList\r\n        show={show}\r\n        closeHandler={closeHandler}\r\n        addFunction={addBoardWithDispatch}\r\n        title=\"board\"\r\n        borrowedGroup={openedList ? openedList.boards : []}\r\n      />\r\n      <Bucket\r\n        show={showBucket}\r\n        dropHandler={(e: any) => dropHandlerTask(e, null, null)}\r\n        isPC={props.isPC}\r\n        dragOverHandler={dragOverHandlerTask}\r\n      />\r\n      <div></div>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useCallback } from \"react\";\nimport \"./App.css\";\nimport { MainPage } from \"./UI/MainPage/MainPage\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { ListPage } from \"./UI/ListPage/ListPage\";\nimport { ListType } from \"./Types/Type\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setLists } from \"./BLL/Reducers/MainReducer\";\nimport { getLists } from \"./BLL/Selectors/mainSelector\";\n\nexport const delay = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\nfunction App() {\n  const [isPC, setMode] = useState(true);\n  const [height, setHeight] = useState(window.innerHeight);\n  const dispatch = useDispatch();\n  let setCurrentMode = useCallback((e: UIEvent) => {\n    if (window.innerWidth > 760) {\n      setMode(true);\n    } else {\n      setMode(false);\n    }\n    setHeight(window.innerHeight);\n  }, []);\n  useEffect(() => {\n    window.addEventListener(\"resize\", setCurrentMode);\n    if (window.innerWidth > 760) {\n      setMode(true);\n    } else {\n      setMode(false);\n    }\n    return () => {\n      window.removeEventListener(\"resize\", setCurrentMode);\n    };\n  }, []);\n  const lists = useSelector(getLists);\n  useEffect(() => {\n    //@ts-ignore\n    let dates: ListType[] = JSON.parse(window.localStorage.getItem(\"dates\")) ?? [];\n    if (dates) {\n      dispatch(setLists(dates));\n    }\n  }, []);\n  useEffect(() => {\n    window.localStorage.setItem(\"dates\", JSON.stringify(lists));\n  }, [lists]);\n\n  return (\n    <div className=\"\">\n      <Switch>\n        <Route\n          path=\"/board\"\n          render={() => <ListPage height={height} isPC={isPC} />}\n        />\n        <Route\n          path=\"*\"\n          render={() => <MainPage height={height} isPC={isPC} />}\n        />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore } from \"redux\";\r\nimport { mainReducer } from \"./Reducers/MainReducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n  main: mainReducer,\r\n});\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nexport let store = createStore(rootReducer);\r\n//@ts-ignore\r\nwindow.store = store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./BLL/store\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}